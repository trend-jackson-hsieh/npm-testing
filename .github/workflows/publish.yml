name: Publish Package to npm (provenance)

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write   # required for OIDC provenance

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      # Upgrade npm (>= 11.5.1 recommended)
      - name: Update npm
        run: npm i -g npm@latest

      # NEW: Ensure package.json.repository.url matches THIS repo (after normalization)
      - name: Precheck repository.url matches this repo
        shell: bash
        run: |
          set -euo pipefail
          # Read repository.url from package.json (may be undefined)
          PKG_REPO_URL="$(node -e "try{console.log((require('./package.json').repository||{}).url||'')}catch(e){process.exit(1)}")"

          # Normalize: drop 'git+' prefix if present
          NORM="$PKG_REPO_URL"
          NORM="${NORM#git+}"

          # Convert SSH form git@github.com:owner/repo(.git)? -> https://github.com/owner/repo(.git)?
          if [[ "$NORM" =~ ^git@github\.com:(.*)$ ]]; then
            NORM="https://github.com/${BASH_REMATCH[1]}"
          fi

          # Ensure .git suffix
          [[ -n "$NORM" && "$NORM" != *.git ]] && NORM="${NORM}.git"

          EXPECTED="https://github.com/${GITHUB_REPOSITORY}.git"

          echo "package.json.repository.url (raw):    $PKG_REPO_URL"
          echo "package.json.repository.url (norm):   $NORM"
          echo "Expected repo URL:                    $EXPECTED"

          if [[ -z "$NORM" ]]; then
            echo "::error ::package.json.repository.url is missing. Set it to: $EXPECTED"
            exit 1
          fi

          if [[ "$NORM" != "$EXPECTED" ]]; then
            echo "::error ::repository.url mismatch. Set package.json.repository.url to EXACTLY: $EXPECTED"
            exit 1
          fi
          echo "repository.url check passed âœ…"

      # Safety check: tag must match package.json version
      - name: Verify tag === package.json version
        run: |
          TAG="${GITHUB_REF##*/}"
          PKG_VER="$(node -p "require('./package.json').version")"
          [ "$TAG" = "v$PKG_VER" ] || { echo "Tag $TAG != $PKG_VER"; exit 1; }

      # Use npm ci if lockfile exists; otherwise fallback to install
      - name: Install deps
        run: |
          if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            npm ci
          else
            npm install --no-audit --fund=false
          fi

      - run: npm run build --if-present
      - run: npm test --if-present
      - run: npm pack --dry-run

      # Publish with OIDC + provenance (shows the badge on npmjs.com)
      - name: Publish (OIDC + provenance)
        env:
          NPM_CONFIG_PROVENANCE: 'true'
        run: npm publish --access public --provenance
